name: Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'api/openapi.yaml'
      - 'docs/**'
      - 'src/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/openapi.yaml'
      - 'docs/**'
      - 'src/**'

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build documentation
      run: |
        # Create docs directory for GitHub Pages
        mkdir -p docs
        
        # Copy OpenAPI spec
        cp api/openapi.yaml docs/
        
        # Copy existing documentation files
        cp -r docs/* docs/ 2>/dev/null || true
        
        # Generate static HTML for Swagger UI
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <title>Payment Service API Documentation</title>
          <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css" />
          <link rel="icon" type="image/png" href="https://unpkg.com/swagger-ui-dist@5.9.0/favicon-32x32.png" sizes="32x32" />
          <link rel="icon" type="image/png" href="https://unpkg.com/swagger-ui-dist@5.9.0/favicon-16x16.png" sizes="16x16" />
          <style>
            html {
              box-sizing: border-box;
              overflow: -moz-scrollbars-vertical;
              overflow-y: scroll;
            }
            *, *:before, *:after {
              box-sizing: inherit;
            }
            body {
              margin:0;
              background: #fafafa;
            }
            .swagger-ui .topbar {
              background-color: #2c3e50;
            }
            .swagger-ui .topbar .download-url-wrapper {
              display: none;
            }
            .custom-header {
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              color: white;
              padding: 2rem;
              text-align: center;
              margin-bottom: 2rem;
            }
            .custom-header h1 {
              margin: 0;
              font-size: 2.5rem;
              font-weight: 300;
            }
            .custom-header p {
              margin: 0.5rem 0 0 0;
              font-size: 1.2rem;
              opacity: 0.9;
            }
            .api-info {
              background: white;
              padding: 1.5rem;
              margin: 1rem;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .api-info h2 {
              color: #2c3e50;
              margin-top: 0;
            }
            .api-info ul {
              list-style: none;
              padding: 0;
            }
            .api-info li {
              padding: 0.5rem 0;
              border-bottom: 1px solid #eee;
            }
            .api-info li:last-child {
              border-bottom: none;
            }
            .api-info strong {
              color: #667eea;
            }
          </style>
        </head>
        <body>
          <div class="custom-header">
            <h1>Payment Service API</h1>
            <p>Comprehensive API documentation for the payment processing service</p>
          </div>
          
          <div class="api-info">
            <h2>ðŸš€ Quick Start</h2>
            <ul>
              <li><strong>Base URL:</strong> <code>https://your-api-domain.com</code></li>
              <li><strong>Authentication:</strong> Bearer Token</li>
              <li><strong>Content-Type:</strong> application/json</li>
              <li><strong>Rate Limiting:</strong> 1000 requests/hour per API key</li>
            </ul>
            
            <h2>ðŸ“‹ Available Endpoints</h2>
            <ul>
              <li><strong>POST /payments</strong> - Create a new payment</li>
              <li><strong>GET /payments/{id}</strong> - Get payment details</li>
              <li><strong>POST /payments/{id}/refund</strong> - Process refund</li>
              <li><strong>GET /payments/user/{userId}</strong> - Get user payments</li>
              <li><strong>GET /payment-history/{paymentId}</strong> - Get payment history</li>
              <li><strong>GET /payment-history/user/{userId}</strong> - Get user payment history</li>
            </ul>
            
            <h2>ðŸ”§ Features</h2>
            <ul>
              <li>Idempotency key support for safe retries</li>
              <li>Comprehensive payment history tracking</li>
              <li>Automatic status change logging</li>
              <li>Rich metadata support for orders and users</li>
              <li>Partitioned data storage for scalability</li>
              <li>7-year compliance retention</li>
            </ul>
          </div>
          
          <div id="swagger-ui"></div>
          
          <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js"></script>
          <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-standalone-preset.js"></script>
          <script>
            window.onload = function() {
              const ui = SwaggerUIBundle({
                url: './openapi.yaml',
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                  SwaggerUIBundle.presets.apis,
                  SwaggerUIStandalonePreset
                ],
                plugins: [
                  SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout",
                tryItOutEnabled: true,
                requestInterceptor: (request) => {
                  // Add default headers
                  request.headers['Content-Type'] = 'application/json';
                  request.headers['Accept'] = 'application/json';
                  return request;
                },
                responseInterceptor: (response) => {
                  // Handle responses
                  return response;
                }
              });
            };
          </script>
        </body>
        </html>
        EOF
        
        # Create a simple README for the docs
        cat > docs/README.md << 'EOF'
        # Payment Service API Documentation
        
        This directory contains the API documentation for the Payment Service.
        
        ## ðŸ“– Documentation
        
        - **[API Documentation](index.html)** - Interactive Swagger UI documentation
        - **[OpenAPI Specification](openapi.yaml)** - Raw OpenAPI 3.0 specification
        
        ## ðŸš€ Quick Links
        
        - **Base URL**: `https://your-api-domain.com`
        - **Authentication**: Bearer Token
        - **Rate Limiting**: 1000 requests/hour per API key
        
        ## ðŸ“‹ Key Features
        
        - âœ… Idempotency key support for safe retries
        - âœ… Comprehensive payment history tracking
        - âœ… Automatic status change logging
        - âœ… Rich metadata support for orders and users
        - âœ… Partitioned data storage for scalability
        - âœ… 7-year compliance retention
        
        ## ðŸ”§ Integration
        
        ### cURL Example
        ```bash
        curl -X POST https://your-api-domain.com/payments \
          -H "Authorization: Bearer YOUR_TOKEN" \
          -H "Content-Type: application/json" \
          -H "Idempotency-Key: payment-123" \
          -d '{
            "amount": 2500,
            "currency": "USD",
            "metadata": {
              "order": {
                "id": "order_123",
                "description": "Premium subscription"
              },
              "user": {
                "id": "user_456",
                "email": "user@example.com"
              }
            }
          }'
        ```
        
        ### JavaScript Example
        ```javascript
        const response = await fetch('https://your-api-domain.com/payments', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer YOUR_TOKEN',
            'Content-Type': 'application/json',
            'Idempotency-Key': 'payment-123'
          },
          body: JSON.stringify({
            amount: 2500,
            currency: 'USD',
            metadata: {
              order: { id: 'order_123', description: 'Premium subscription' },
              user: { id: 'user_456', email: 'user@example.com' }
            }
          })
        });
        ```
        
        ## ðŸ“ž Support
        
        For questions or issues, please contact the development team or create an issue in the repository.
        EOF
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: # Optional: add your custom domain here
        
    - name: Comment PR with preview link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Documentation Preview')
          );
          
          const commentBody = `## ðŸ“– Documentation Preview
          
          The API documentation has been updated. You can preview the changes at:
          
          ðŸ”— **Preview URL**: https://${context.repo.owner}.github.io/${context.repo.repo}/
          
          ### Changes in this PR:
          - Updated OpenAPI specification
          - Modified API endpoints
          - Enhanced documentation
          
          The documentation will be automatically deployed to GitHub Pages when this PR is merged.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
